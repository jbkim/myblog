<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Raspberry Pi on OpenMicroLab</title><link>https://openmicrolab.com/categories/raspberry-pi/</link><description>Recent content in Raspberry Pi on OpenMicroLab</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Tue, 21 Aug 2018 01:43:59 +0000</lastBuildDate><atom:link href="https://openmicrolab.com/categories/raspberry-pi/index.xml" rel="self" type="application/rss+xml"/><item><title>Resin.io 사용법</title><link>https://openmicrolab.com/resin-io-%EC%82%AC%EC%9A%A9%EB%B2%95/</link><pubDate>Tue, 21 Aug 2018 01:43:59 +0000</pubDate><guid>https://openmicrolab.com/resin-io-%EC%82%AC%EC%9A%A9%EB%B2%95/</guid><description>
&lt;p>&lt;a href="https://resin.io/" target="_blank" rel="noopener noreferrer">Resin.io&lt;/a>의 홈페이지에는 다음과 같이 자신들의 서비스를 설명을 한다.&lt;/p>
&lt;blockquote>
&lt;p class="header__subtitle">
Resin.io brings the benefits of Linux containers to the IoT. Develop iteratively, deploy safely, and manage at scale.
&lt;/p>&lt;/blockquote>
&lt;p class="header__subtitle">
&lt;span style="color: #0000ff;">&lt;strong>Linux containers to the IoT&amp;#8230; 리눅스 기반의 IoT 디바이스를 위한 도커같은 서비스 일 것 같다.&lt;/strong>&lt;/span>
&lt;/p>
&lt;h2 class="header__subtitle" id="resinio-사용법">Resin.io 사용법&lt;/h2>
&lt;h3 id="account-setup">Account setup&lt;/h3>
&lt;p>resin.io 에 계정을 생성후 SSH 키 설정하여 resin에 저장을 하는데,  깃헙계정으로 로그인 할 경우 깃헙계정에 저장된 SSH 키 중 하나를 선택한다.&lt;/p>
&lt;h3 id="ssh-키-확인">SSH 키 확인&lt;/h3>
&lt;blockquote>
&lt;p>ls -al ~/.ssh&lt;/p></description></item><item><title>키보드, 모니터 없이 라즈베리파이 개발 환경 설정</title><link>https://openmicrolab.com/%ED%82%A4%EB%B3%B4%EB%93%9C-%EB%AA%A8%EB%8B%88%ED%84%B0-%EC%97%86%EC%9D%B4-%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95/</link><pubDate>Mon, 20 Aug 2018 02:02:49 +0000</pubDate><guid>https://openmicrolab.com/%ED%82%A4%EB%B3%B4%EB%93%9C-%EB%AA%A8%EB%8B%88%ED%84%B0-%EC%97%86%EC%9D%B4-%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95/</guid><description>
&lt;h3 id="라즈베리파리rpi-핀맵">라즈베리파리(RPI) 핀맵&lt;/h3>
&lt;p>###&lt;img loading="lazy" class="alignnone wp-image-4404" src="https://res.cloudinary.com/openmicrolab/image/upload/v1534730311/RP2_Pinout_jbzzwg.png" width="823" height="491" />&lt;/p>
&lt;h3 id="1-라즈베리파이-기본-설정">1. 라즈베리파이 기본 설정&lt;/h3>
&lt;p>– RPI 이미지 다운로드: &lt;a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener noreferrer">&lt;a href="https://www.raspberrypi.org/downloads/">https://www.raspberrypi.org/downloads/&lt;/a>&lt;/a>&lt;br>
– &lt;a href="https://etcher.io/" target="_blank" rel="noopener noreferrer">Etcher&lt;/a> 같은 image writing 툴로 다운로드 받은 이미지를 SD에 writing&lt;br>
– RPI에 SD를 넣고, 시리얼 포트를 연결하고 맥의 터미널에서 115200으로 연결한다.&lt;/p>
&lt;blockquote>
&lt;p>screen /dev/tty.SLAB_USBtoUART 115200&lt;/p>&lt;/blockquote>
&lt;p>– pi/raspberry로 로그인 한다.&lt;br>
– &lt;strong>sudo raspi-config&lt;/strong>로 wifi 설정 및 SSH 설정후 재부팅&lt;br>
– 다시 로그인하면 &lt;strong>ifconfig&lt;/strong>로 할당 받은 ip 확인&lt;br>
– 맥의 터미널에서 &lt;strong>ssh &lt;a href="mailto:pi@xxx.xxx.xxx.xxx">pi@xxx.xxx.xxx.xxx&lt;/a>로 접속&lt;/strong>&lt;/p>
&lt;h3 id="2-gpio-프로그래밍">2. GPIO 프로그래밍&lt;/h3>
&lt;p>&lt;strong>Package들의 최신버전 체크 및 설치&lt;/strong>&lt;/p></description></item></channel></rss>