<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SPI on OpenMicroLab</title><link>https://openmicrolab.com/tags/spi/</link><description>Recent content in SPI on OpenMicroLab</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Sat, 28 Aug 2021 03:35:37 +0000</lastBuildDate><atom:link href="https://openmicrolab.com/tags/spi/index.xml" rel="self" type="application/rss+xml"/><item><title>SPI 핀 네이밍</title><link>https://openmicrolab.com/spi-%ED%95%80-%EB%84%A4%EC%9D%B4%EB%B0%8D/</link><pubDate>Sat, 28 Aug 2021 03:35:37 +0000</pubDate><guid>https://openmicrolab.com/spi-%ED%95%80-%EB%84%A4%EC%9D%B4%EB%B0%8D/</guid><description>
&lt;p>마스터, 슬레이브의 이름에서 주는 주종관계 때문에 그동안 별 의식없이 쓰여왔던 이름들이 바뀌었다.&lt;/p>
&lt;p>MOSI – COPI&lt;/p>
&lt;p>MISO – CIPO&lt;/p>
&lt;p>이 2가지만 기억하면 될 것 같다.&lt;/p>
&lt;h3 id="new-signal-names">New signal names:&lt;/h3>
&lt;ul>
&lt;li>SDO – Serial Data Out. An output signal on a device where data is sent out to another SPI device.&lt;/li>
&lt;li>SDI – Serial Data In. An input signal on a device where data is received from another SPI device.&lt;/li>
&lt;li>CS – Chip Select. Activated by the controller to initiate communication with a given peripheral.&lt;/li>
&lt;li>COPI (controller out / peripheral in). For devices that can be either a controller or a peripheral; the signal on which the device sends output when acting as the controller, and receives input when acting as the peripheral.&lt;/li>
&lt;li>CIPO (controller in / peripheral out). For devices that can be either a controller or a peripheral; the signal on which the device receives input when acting as the controller, and sends output when acting as the peripheral.&lt;/li>
&lt;li>SDIO – Serial Data In/Out. A bi-directional serial signal.&lt;/li>
&lt;/ul>
&lt;h3 id="deprecated-signal-names">Deprecated signal names:&lt;/h3>
&lt;ul>
&lt;li>MOSI – Master Out Slave In&lt;/li>
&lt;li>MISO – Master In Slave Out&lt;/li>
&lt;li>SS – Slave Select&lt;/li>
&lt;li>MOMI – Master Out Master In&lt;/li>
&lt;li>SOSI – Slave Out Slave In&lt;/li>
&lt;/ul>
&lt;h3 id="signal-names-unchanged">Signal names unchanged:&lt;/h3>
&lt;ul>
&lt;li>SCK – Serial Clock. The clock for the bus generated by the controller.&lt;/li>
&lt;/ul></description></item><item><title>SD 메모리 SPI로 제어하기 – 2</title><link>https://openmicrolab.com/sd-%EB%A9%94%EB%AA%A8%EB%A6%AC-spi%EB%A1%9C-%EC%A0%9C%EC%96%B4%ED%95%98%EA%B8%B0-2/</link><pubDate>Thu, 19 Nov 2015 05:53:48 +0000</pubDate><guid>https://openmicrolab.com/sd-%EB%A9%94%EB%AA%A8%EB%A6%AC-spi%EB%A1%9C-%EC%A0%9C%EC%96%B4%ED%95%98%EA%B8%B0-2/</guid><description>
&lt;p>지난번 포스팅 “&lt;a href="http://openmicrolab.com/sd-%EB%A9%94%EB%AA%A8%EB%A6%AC-spi%EB%A1%9C-%EC%A0%9C%EC%96%B4%ED%95%98%EA%B8%B0/" target="_blank">SD 메모리 SPI로 제어하기&lt;/a>“의 내용만으로는 부족하여 추가적으로 정리한다.&lt;/p>
&lt;p>SD 메모리 카드는 기본적으로 전원이 들어오면 SDIO로 동작을 한다. 따라서 대부분의 칩벤더에서는 SDIO인터페이스를 사용하는 예제를 제공하는데, SDIO가 없는 작은 MCU에서는 SPI를 사용해야 한다. 따라서 다음 그림과 같은 초기화 루틴이 필요하다.&lt;/p>
&lt;h3 id="spi모드에서-sd-메모리-초기화-루틴">SPI모드에서 SD 메모리 초기화 루틴&lt;/h3>
&lt;p>&lt;a href="http://elm-chan.org/docs/mmc/gx1/sdinit.png">&lt;img loading="lazy" class="aligncenter" src="http://elm-chan.org/docs/mmc/gx1/sdinit.png" alt="" width="850" height="920" />&lt;/a>&lt;/p>
&lt;h3 id="sd-메모리-커맨드">SD 메모리 커맨드&lt;/h3>
&lt;p>&lt;a href="https://openmicrolab.com/images/2015/11/How_to_Use_MMC_SDC.png">&lt;img loading="lazy" class="aligncenter size-full wp-image-3468" src="https://openmicrolab.com/images/2015/11/How_to_Use_MMC_SDC.png" alt="How_to_Use_MMC_SDC" width="1368" height="787" srcset="https://openmicrolab.com/images/2015/11/How_to_Use_MMC_SDC.png 1368w, https://openmicrolab.com/images/2015/11/How_to_Use_MMC_SDC-300x173.png 300w, https://openmicrolab.com/images/2015/11/How_to_Use_MMC_SDC-1024x589.png 1024w" sizes="(max-width: 1368px) 100vw, 1368px" />&lt;/a>&lt;/p>
&lt;ul>
&lt;li>1번: CS, MISO를 High로 하고 74개 이상의 SPI dummy clock을 전송한다.&lt;/li>
&lt;li>2번: CRC가 반드시 일치해야 한다.&lt;/li>
&lt;/ul>
&lt;p>위 표에서 CMD0은 0, CMD8은 8을 전송하는 형태이고, ACMD41은 CMD55를 전송후 CMD41를 전송하는 것이며, argument로 30번째 비트가 세트된 32비트를 전송한다.&lt;/p></description></item><item><title>SD 메모리 SPI로 제어하기</title><link>https://openmicrolab.com/sd-%EB%A9%94%EB%AA%A8%EB%A6%AC-spi%EB%A1%9C-%EC%A0%9C%EC%96%B4%ED%95%98%EA%B8%B0/</link><pubDate>Wed, 10 Jun 2015 09:36:12 +0000</pubDate><guid>https://openmicrolab.com/sd-%EB%A9%94%EB%AA%A8%EB%A6%AC-spi%EB%A1%9C-%EC%A0%9C%EC%96%B4%ED%95%98%EA%B8%B0/</guid><description>
&lt;h3 id="sd-메모리-카드">SD 메모리 카드&lt;/h3>
&lt;p>SD메모리 는 SDC(Secure Digital Memory Card)를 지칭하며 MMC(Multi Media Card)와 호환된다. 이 SD메모리 카드는 SDIO 또는 SPI로 제어가 가능하다.&lt;/p>
&lt;p>&lt;a href="https://openmicrolab.com/images/2015/06/sd-card-pinout.png">&lt;img loading="lazy" class="alignnone wp-image-3374" src="https://openmicrolab.com/images/2015/06/sd-card-pinout.png" alt="SD card pinout" width="353" height="394" srcset="https://openmicrolab.com/images/2015/06/sd-card-pinout.png 447w, https://openmicrolab.com/images/2015/06/sd-card-pinout-269x300.png 269w" sizes="(max-width: 353px) 100vw, 353px" />&lt;/a>&lt;/p>
&lt;h3 id="sd-메모리-spi로-제어하기">SD 메모리 SPI로 제어하기&lt;/h3>
&lt;p>SPI 모드는 4가지가 있는데, SD를 제어하기 위해서는  Mode 0를 사용한다. 즉 CPHA = 0, CPOL = 0&lt;/p>
&lt;img loading="lazy" class="alignnone wp-image-3376" src="https://openmicrolab.com/images/2015/06/SD_SPI_CMD.png" alt="SD_SPI_CMD" width="721" height="155" srcset="https://openmicrolab.com/images/2015/06/SD_SPI_CMD.png 800w, https://openmicrolab.com/images/2015/06/SD_SPI_CMD-300x65.png 300w" sizes="(max-width: 721px) 100vw, 721px" />
&lt;p>SPI로 제어시 command는 Command Index(1바이트) + Argument(4바이트) + CRC(1바이트) = 총 6바이트로 구성이되며, 항상 응답코드가 있다. CRC는 CMD0의 경우 0x95, CMD8의 경우 0x87이며, 나머지는 코드에서 0xFF로 처리한다. 아래 링크의 스펙 문서의 부록에 command list 참고&lt;/p></description></item><item><title>SPI of Arduino</title><link>https://openmicrolab.com/spi-of-arduino/</link><pubDate>Mon, 17 Mar 2014 09:50:04 +0000</pubDate><guid>https://openmicrolab.com/spi-of-arduino/</guid><description>
&lt;h3 id="spi-of-arduino">SPI of Arduino&lt;/h3>
&lt;p>[table id=2 /]&lt;/p>
&lt;blockquote>
&lt;p>&lt;span style="line-height: 1.5em;">SPI 신호들은 ICSP핀이나 보드의 우측 상단(AREF 있는 쪽)에 같이 연결된 경우도 있으나, 그렇지 않은 경우도 있다. 그러므로 SPI를 사용하는 쉴드를 디자인 할 경우 라우팅을 쉽게하기 위해 한쪽만 SPI를 사용하려면 ICSP핀 쪽에만 연결을 하면 된다.&lt;/span>&lt;/p>&lt;/blockquote></description></item></channel></rss>