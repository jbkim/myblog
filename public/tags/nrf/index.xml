<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nrf on OpenMicroLab</title><link>https://openmicrolab.com/tags/nrf/</link><description>Recent content in Nrf on OpenMicroLab</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Fri, 24 Sep 2021 05:41:27 +0000</lastBuildDate><atom:link href="https://openmicrolab.com/tags/nrf/index.xml" rel="self" type="application/rss+xml"/><item><title>BLE over UART throughput</title><link>https://openmicrolab.com/ble-over-uart-throughput/</link><pubDate>Fri, 24 Sep 2021 05:41:27 +0000</pubDate><guid>https://openmicrolab.com/ble-over-uart-throughput/</guid><description>
&lt;p>Adafruit사의 &lt;a href="https://learn.adafruit.com/adafruit-feather-m0-bluefruit-le?view=all" target="_blank" rel="noopener">Feather m0 bluefruit&lt;/a> 보드의 UART to BLE Throughput 측정. PC측에는 nRF Connect 앱인 BLE 앱을 사용함.&lt;/p>
&lt;p>&lt;a href="https://openmicrolab.com/images/2021/09/nRF_BLE.png">&lt;img loading="lazy" class="aligncenter wp-image-4803" src="https://openmicrolab.com/images/2021/09/nRF_BLE-300x232.png" alt="" width="417" height="323" srcset="https://openmicrolab.com/images/2021/09/nRF_BLE-300x232.png 300w, https://openmicrolab.com/images/2021/09/nRF_BLE-1024x791.png 1024w, https://openmicrolab.com/images/2021/09/nRF_BLE-768x593.png 768w, https://openmicrolab.com/images/2021/09/nRF_BLE.png 1032w" sizes="(max-width: 417px) 100vw, 417px" />&lt;/a>&lt;/p>
&lt;p>이 앱에서 연결을 하고 데이터를 수신한다. 보내는 측의 로그를 확인하면 대략 4.71KB/S 정도 나오는데, 핸드폰 앱에서 확인해보니 4KB/S 정도 나옴.&lt;/p>
&lt;p>&lt;a href="https://openmicrolab.com/images/2021/09/Ble_ThroughtPut.png">&lt;img loading="lazy" class="aligncenter size-medium wp-image-4802" src="https://openmicrolab.com/images/2021/09/Ble_ThroughtPut-300x221.png" alt="" width="300" height="221" srcset="https://openmicrolab.com/images/2021/09/Ble_ThroughtPut-300x221.png 300w, https://openmicrolab.com/images/2021/09/Ble_ThroughtPut.png 368w" sizes="(max-width: 300px) 100vw, 300px" />&lt;/a>&lt;/p>
&lt;p>성능도 중요하지만 무선이므로 데이터 손실이 없을 수 없으며, 찾아보니 그 이유중 하나는 다음과 같다. (출처 – &lt;a href="https://interrupt.memfault.com/blog/ble-throughput-primer" target="_blank" rel="noopener">&lt;a href="https://interrupt.memfault.com/blog/ble-throughput-primer">https://interrupt.memfault.com/blog/ble-throughput-primer&lt;/a>&lt;/a>)&lt;/p></description></item><item><title>Mac OSX에 nRF52 개발 환경 설정하기</title><link>https://openmicrolab.com/mac-osx%EC%97%90-nrf52-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</link><pubDate>Sun, 11 Aug 2019 13:02:07 +0000</pubDate><guid>https://openmicrolab.com/mac-osx%EC%97%90-nrf52-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</guid><description>
&lt;p>2년전에 작업한 Mac OS X에 &lt;a href="http://openmicrolab.com/mac-os-x%ec%97%90-nrf51-%ea%b0%9c%eb%b0%9c-%ed%99%98%ea%b2%bd-%ec%84%a4%ec%a0%95%ed%95%98%ea%b8%b0/" target="_blank" rel="noopener">nRF51 개발 환경 설정하기 포스팅&lt;/a>을 보면서 nRF52 환경을 설정하다가 달라진 점이 있어서 다시 쓰게된 포스팅.&lt;/p>
&lt;p>개념은 다음과 같다. 1) gcc 와 툴체인 설치 2) OSX용 nRF5x Command Line Tools 설치 3) SDK 설치.  이 과정에서 gcc 실행파일 위치를 bash_profile에 입력하고, SDK의 gcc 컴파일 설정을 이에 맞게 하면 된다.&lt;/p>
&lt;h3 id="gcc-와-툴체인-설치">gcc 와 툴체인 설치&lt;/h3>
&lt;p>여기에서 최신 버전 &lt;a href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads" target="_blank" rel="noopener">다운로드&lt;/a> 및 다음과 같이 압축을 푼다. 설치 위치는 크게 중요하지 않다. 만약 이전에 설치를 했을 경우 ~/usr/local/bin 아래 설치를 했을 수도 있음.&lt;/p></description></item></channel></rss>